OneToOne : Annonce  et Image , relation unidirectionel
/******************************************************************/
class Annonce {   //ce l'entite propréitaire qui contient image_id
/**
  * @ORM\OneToOne(targetEntity="OC\PlatformBundle\Entity\Image", cascade={"persist"})
  * @ORM\JoinColumn(nullable=false)  //si on veut que image_id accepte null on change true
  */
private $image;  //va genere image_id dans table annonce

}

class Image {
 private $url;
 private $alt;
 //rien a ajouté pour la relation
}

//manipulation
$image = $annonce->getImage();
$url_image = $annonce->getImage()->getUrl();
$id_image=$annonce->getImage()->getId();

{% if annonce.image is not null %}
  <img src="{{ annonce.image.url }}" alt="{{ annonce.image.alt }}">
{% endif %}
/*****************************************************************************************************************************************/

OneToMany : Annonce  et Candidature , relation unidirectionel
/******************************************************************/
class Candidature
{
  /**
   * @ORM\ManyToOne(targetEntity="OC\PlatformBundle\Entity\Annonce")
   * @ORM\JoinColumn(nullable=false)  //interdire de faire une candidature sans annonce
   */
  private $annonce;  //va generer annonce_id dans table candidature
}
class Annonce {
}

//manupilation:
// Création de l'entité Advert
    $annonce = new Annonce();
    $annonce->setTitle('Recherche développeur Symfony2.');
    $annonce->setAuthor('Alexandre');
    $annonce->setContent("Nous recherchons un développeur Symfony2 débutant sur Lyon. Blabla…");

    // Création d'une première candidature
    $candidature = new Candidature();
    $candidature->setContent("J'ai toutes les qualités requises.");

    // On lie les candidatures à l'annonce
    $candidature->setAnnonce($annonce);
    // On récupère l'EntityManager
    $em = $this->getDoctrine()->getManager();
    $em->persist($annonce);

// On récupère l'annonce $id
    $annonce = $em ->getRepository('OCPlatformBundle:Annonce')->find($id) ;

    if (null === $annonce) {
      throw new NotFoundHttpException("L'annonce d'id ".$id." n'existe pas.");
    }

    // On récupère la liste des candidatures de cette annonce
    $list_candidature = $em->getRepository('OCPlatformBundle:Candidature')->findBy(array('annonce' => $annonce));
    
    
/*****************************************************************************************************************************************/
OneToMany : Annonce  et Candidature , relation bidirectionel
/******************************************************************/
class Candidature
{
  /**
   * @ORM\ManyToOne(targetEntity="OC\PlatformBundle\Entity\Annonce" , inversedBy="candidatures")
   * @ORM\JoinColumn(name="annonce_id", referencedColumnName="id")
   */
  private $annonce;  //va generer annonce_id dans table candidature
}
class Annonce {
  
   /**
   * @ORM\OneToMany(targetEntity="OC\PlatformBundle\Entity\Candidature", mappedBy="annonce")
   */
  private $candidatures;
  public function __construct()
  {
    $this->candidatures = new ArrayCollection();
  }

  public function addCandidature(Candidature $candidature)
  {
    $this->candidatures[] = $candidature;
    // On lie l'annonce à la candidature
    $candidature->setAnnonce($this);

    return $this;
  }

  public function removeCandidature(Candidature $candidature)
  {
    $this->candidatures->removeElement($candidature);
  }

  public function getCandidature()
  {
    return $this->candidatures;
  }
}


/*****************************************************************************************************************************************/

ManyToMany : Annonce  et category , relation unidirectionel
/******************************************************************/
    
class Annonce
{
  /**
   * @ORM\ManyToMany(targetEntity="OC\PlatformBundle\Entity\Category", cascade={"persist"})
   */
  private $categories;
  public function __construct()
  {
    $this->categories = new ArrayCollection();
  }
  public function addCategory(Category $category)
  {
    $this->categories[] = $category;
    return $this;
  }

  public function removeCategory(Category $category)
  {
    $this->categories->removeElement($category);
  }

  public function getCategories()
  {
    return $this->categories;
  }
}   

class Category
{
  // Nul besoin d'ajouter une propriété ici
}  

//manipulation
 $em = $this->getDoctrine()->getManager();
 $annonce = $em->getRepository('OCPlatformBundle:Annonce')->find($id);

if (null === $annonce) {
  throw new NotFoundHttpException("L'annonce d'id ".$id." n'existe pas.");
}
$listCategories = $em->getRepository('OCPlatformBundle:Category')->findAll();
// On boucle sur les catégories pour les lier à l'annonce
foreach ($listCategories as $category) {
      $annonce->addCategory($category);
}

$em->flush();

//supression
// On boucle sur les catégories de l'annonce pour les supprimer
    foreach ($annonce->getCategories() as $category) {
      $annonce->removeCategory($category);
    }
//twig

{% if not annonce.categories.empty %}
  <p>
    Cette annonce est parue dans les catégories suivantes :
    {% for category in annonce.categories %}
      {{ category.name }}{% if not loop.last %}, {% endif %}
    {% endfor %}
  </p>
{% endif %}

// relation avec attribut : Commande One-To-Many CommandeProduit Many-To-One Produit
class CommandeProduit
{
  private $id;
  /**
   * @ORM\Column(name="quantite", type="integer")
   */
  private $quantite;
  /**
   * @ORM\ManyToOne(targetEntity="OC\PlatformBundle\Entity\Commande")
   * @ORM\JoinColumn(nullable=false)
   */
  private $commande;   //va generer commande_id
  /**
   * @ORM\ManyToOne(targetEntity="OC\PlatformBundle\Entity\Produit")
   * @ORM\JoinColumn(nullable=false)
   */
  private $produit;   //va generer produit_id
}

//manipulation:
 // On récupère l'EntityManager
    $em = $this->getDoctrine()->getManager();

    // Création de l'entité Commande
    $commande = new Commande();
    $commande->setReference('1222');   

    // On récupère toutes les produits
    $listProduits = $em->getRepository('OCPlatformBundle:Produit')->findAll();

    // Pour chaque compétence
    foreach ($listProduits as $produit) {
      // On crée une nouvelle « relation entre 1 commande et 1 produit »
      $commandeProduit = new CommandeProduit();

      // On la lie à la commande, qui est ici toujours la même
      $commandeProduit->setCommande($commande);
      // On la lie au produit, qui change ici dans la boucle foreach
      $commandeProduit->setProduit($produit);

      // Arbitrairement
      $commandeProduit->setQuantite('1');

      // Et bien sûr, on persiste cette entité de relation, propriétaire des deux autres relations
      $em->persist($commandeProduit);
    }

    $em->persist($commande);

    // On déclenche l'enregistrement
    $em->flush();
